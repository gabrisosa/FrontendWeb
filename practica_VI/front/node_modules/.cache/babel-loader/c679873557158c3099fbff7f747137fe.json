{"ast":null,"code":"var _jsxFileName = \"/usr/src/src/components/PersonsList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_PERSONS = gql`\n  query getPersons {\n    getPersons {\n      _id\n      name\n      surname\n      email\n      phone\n    }\n  }\n`;\n\nconst PersonsList = () => {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_PERSONS);\n  const [sortSelect, setSortSelect] = useState(false); // useQuery es un hook de apollo, cada vez que el servidor graphql nos da algun evento, la pagina se rerenderiza\n  // devuelve un objeto con el campo getPersons, que devuelve un array de Person\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Cargando...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => setSortSelect(false),\n      children: \"A-Z\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => setSortSelect(true),\n      children: \"Z-A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), data && [...data.getPersons].sort((a, b) => {\n      if (!sortSelect) {\n        if (a.name > b.name) {\n          return 1;\n        }\n\n        if (b.name > a.name) {\n          return -1;\n        }\n\n        return 0;\n      } else {\n        if (a.name > b.name) {\n          return -1;\n        }\n\n        if (b.name > a.name) {\n          return 1;\n        }\n\n        return 0;\n      }\n    }).map(person => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [person.name, \" \", person.surname, \" \", person.email, \" \", person.phone]\n    }, person._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PersonsList, \"KJFAHBMSIOIAgtdfqi3LdbJ++Sw=\", false, function () {\n  return [useQuery];\n});\n\n_c = PersonsList;\nexport default PersonsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PersonsList\");","map":{"version":3,"names":["React","useState","gql","useQuery","GET_PERSONS","PersonsList","data","loading","error","sortSelect","setSortSelect","e","getPersons","sort","a","b","name","map","person","surname","email","phone","_id"],"sources":["/usr/src/src/components/PersonsList.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\"\n\ntype Person = {\n  _id: string,\n  name: string,\n  surname: string,\n  email: string,\n  phone: string\n}\n\nconst GET_PERSONS = gql`\n  query getPersons {\n    getPersons {\n      _id\n      name\n      surname\n      email\n      phone\n    }\n  }\n`;\n\nconst PersonsList = () => {\n\n  const {data, loading, error} = useQuery <{ getPersons: Person[] }>(GET_PERSONS);\n\n  const [sortSelect, setSortSelect] = useState<boolean>(false)\n\n  // useQuery es un hook de apollo, cada vez que el servidor graphql nos da algun evento, la pagina se rerenderiza\n  // devuelve un objeto con el campo getPersons, que devuelve un array de Person\n\n  if (loading) return <div>Cargando...</div>\n  if (error) return <div>Error...</div>\n\n  return (\n    <div>\n      <button onClick={(e) => setSortSelect(false)}>A-Z</button>\n      <button onClick={(e) => setSortSelect(true)}>Z-A</button>\n      {data&&[...data.getPersons].sort((a, b) => {\n        if (!sortSelect) {\n          if (a.name > b.name) {\n            return 1;\n          }\n          if (b.name > a.name) {\n            return -1;\n          }\n          return 0;\n        } else {\n          if (a.name > b.name) {\n            return -1;\n          }\n          if (b.name > a.name) {\n            return 1;\n          }\n          return 0;\n        }\n      }).map((person) => (\n        <div key={person._id}>\n          {person.name} {person.surname} {person.email} {person.phone}\n        </div>))\n      }\n    </div>\n  )\n};\n\nexport default PersonsList;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;;AAUA,MAAMC,WAAW,GAAGF,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYA,MAAMG,WAAW,GAAG,MAAM;EAAA;;EAExB,MAAM;IAACC,IAAD;IAAOC,OAAP;IAAgBC;EAAhB,IAAyBL,QAAQ,CAA4BC,WAA5B,CAAvC;EAEA,MAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAU,KAAV,CAA5C,CAJwB,CAMxB;EACA;;EAEA,IAAIM,OAAJ,EAAa,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;EACb,IAAIC,KAAJ,EAAW,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;EAEX,oBACE;IAAA,wBACE;MAAQ,OAAO,EAAGG,CAAD,IAAOD,aAAa,CAAC,KAAD,CAArC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAQ,OAAO,EAAGC,CAAD,IAAOD,aAAa,CAAC,IAAD,CAArC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,EAGGJ,IAAI,IAAE,CAAC,GAAGA,IAAI,CAACM,UAAT,EAAqBC,IAArB,CAA0B,CAACC,CAAD,EAAIC,CAAJ,KAAU;MACzC,IAAI,CAACN,UAAL,EAAiB;QACf,IAAIK,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;UACnB,OAAO,CAAP;QACD;;QACD,IAAID,CAAC,CAACC,IAAF,GAASF,CAAC,CAACE,IAAf,EAAqB;UACnB,OAAO,CAAC,CAAR;QACD;;QACD,OAAO,CAAP;MACD,CARD,MAQO;QACL,IAAIF,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;UACnB,OAAO,CAAC,CAAR;QACD;;QACD,IAAID,CAAC,CAACC,IAAF,GAASF,CAAC,CAACE,IAAf,EAAqB;UACnB,OAAO,CAAP;QACD;;QACD,OAAO,CAAP;MACD;IACF,CAlBM,EAkBJC,GAlBI,CAkBCC,MAAD,iBACL;MAAA,WACGA,MAAM,CAACF,IADV,OACiBE,MAAM,CAACC,OADxB,OACkCD,MAAM,CAACE,KADzC,OACiDF,MAAM,CAACG,KADxD;IAAA,GAAUH,MAAM,CAACI,GAAjB;MAAA;MAAA;MAAA;IAAA,QAnBK,CAHT;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA6BD,CAzCD;;GAAMjB,W;UAE2BF,Q;;;KAF3BE,W;AA2CN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}